package exception;

public class TopicSummary {
    /*
    Java Exception Handling Nedir?
    Java Exception Handling Nedir baÅŸlÄ±ÄŸÄ±mÄ±zÄ± parÃ§alara bÃ¶lerek gidecek olursak, Exception kavramÄ±nÄ±n TÃ¼rkÃ§e karÅŸÄ±lÄ±ÄŸÄ±nÄ±n
    istisnalar olarak yapÄ±ldÄ±ÄŸÄ±nÄ± gÃ¶rÃ¼rÃ¼z. Handling kavramÄ± ise iÅŸlemek, kullanmak gibi anlamlara gelmekte, bu anlamlar
    birleÅŸtirildiÄŸi zaman literatÃ¼re hata yakalama olarak geÃ§iÅŸ saÄŸlamÄ±ÅŸtÄ±r.

    Peki, programlarÄ±mÄ±z iÃ§erisinde bu kavram neyi ifade ediyor diye soracak olursanÄ±z onunda aÃ§Ä±klamasÄ±nÄ± kod bloklarÄ±
    arasÄ±nda oluÅŸan anormal durumlar olarak yapabilirim. ğŸ”¦ Bu kavramÄ± biraz daha aÃ§arak buz daÄŸÄ±nÄ±n keÅŸfinde biraz daha
    derinlere inelim.

    Her program oluÅŸturulduÄŸu zaman bazÄ± hatalar ile karÅŸÄ±laÅŸmamÄ±z olasÄ± bir hale gelir ve bu hata yapÄ±larÄ±na gÃ¶re kendi
    iÃ§lerinde ayrÄ±ÅŸtÄ±rÄ±lÄ±r. BazÄ± ortaya Ã§Ä±kan hatalarÄ± Java sayesinde yakalamamÄ±z daha kolay bir haldeyken bazÄ± hatalarÄ±
    bizzat kendimizin kod bloklarÄ±nÄ± kurcalayarak bulmamÄ±z gerekebilir ve son olarak ise geri dÃ¶nÃ¼lemez, tamir edilmesi
    mÃ¼mkÃ¼n olmayan bazÄ± hata tipleri ile karÅŸÄ±laÅŸmamÄ±z mÃ¼mkÃ¼ndÃ¼r.

    Bu exception tÃ¼rleri yukarÄ±da belirttiÄŸim gibi Ã¼Ã§ temel baÅŸlÄ±ÄŸa ayrÄ±lÄ±r bunlara aÅŸaÄŸÄ±daki baÅŸlÄ±kta gÃ¶z attÄ±ktan sonra
    java exception handling iÅŸlemi iÃ§in Ã¶rnekler oluÅŸturmaya baÅŸlayabiliriz.

    Java Exception TÃ¼rleri

    Checked Exception (ğŸ¤—): ProgramÄ±mÄ±zÄ±n temelinde meydana gelebileceÄŸi olasÄ± bir takÄ±m hatalar sÃ¶z konusu oluyor ve bu
    kod satÄ±rÄ±nÄ± oluÅŸtururken program bize bir try-catch tanÄ±mlamasÄ± ya da throws aÃ§Ä±klamasÄ± yapmamÄ±zÄ± istiyorsa bu hata
    tÃ¼rÃ¼ne Checked Exception denilir.Mesela ilerleyen konularÄ±mÄ±zda gÃ¶receÄŸimiz JDBC ile veri tabanÄ± baÄŸlantÄ±sÄ± kuracaÄŸÄ±mÄ±z
    zaman ya da bir dosyaya ulaÅŸarak iÅŸlem yapmamÄ±z gerektiÄŸinde kullanacaÄŸÄ±mÄ±z IOException, SqlException gibi kavramlar
    kullanmamÄ±z gerekir.


    Unchecked Exception (ğŸ˜¨): YukarÄ±daki exception tÃ¼rÃ¼nde yapmak istediÄŸimiz iÅŸlemi java algÄ±lÄ±yor ve bunun bir hata
    meydana getirebileceÄŸini dÃ¼ÅŸÃ¼ndÃ¼ÄŸÃ¼ iÃ§in Ã¶nceden Ã¶nlem alÄ±nmasÄ±nÄ± istiyordu fakat bu hata tÃ¼rÃ¼mÃ¼zde java bizi bir
    tanÄ±mlama yapmaya zorlamÄ±yor. Bu yapÄ±sÄ± yÃ¼zÃ¼nden de Ã§oÄŸu zaman geliÅŸtiricileri sinir krizine doÄŸru gÃ¶tÃ¼rebiliyor.
    Bu hata tÃ¼rÃ¼ne Ã¶rnek olarak programÄ±n vereceÄŸi RuntimeException veya bir deÄŸeri 0â€™a bÃ¶lmeye Ã§alÄ±ÅŸacaÄŸÄ±mÄ±z zaman
    verdiÄŸi ArithmeticException gibi Ã¶rnekler verilebilir. Bu hata sonuÃ§larÄ±nÄ±n Ã§Ã¶zÃ¼mlerini bularak sonradan kendimizin
    mÃ¼dahale etmesi gerekmektedir.


    Error (ğŸ˜±): Hata tÃ¼rleri iÃ§erisinde belki de karÅŸÄ±laÅŸmak istemeyeceÄŸimiz tek hata tÃ¼rÃ¼ error olabilir. ProgramÄ±n
    Ã§alÄ±ÅŸma esnasÄ±nda meydana gelecek OutOfMemoryError, StackOverFlowError gibi yapÄ±larÄ±n Ã§Ã¶zÃ¼mÃ¼ iÃ§in yazmÄ±ÅŸ olduÄŸumuz
    kod satÄ±rlarÄ±nÄ± bazen baÅŸtan sona deÄŸiÅŸtirmemiz gerekebilir.

     */
}
